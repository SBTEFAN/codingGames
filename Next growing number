
import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution {

    /**
     * @param args
     */
    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        String n = in.nextLine();
        // debut solution

        Long nbis = Long.parseLong(n);
        nbis = nbis + 1;
        System.err.println("nbis : " + nbis);

        System.err.println("n : " + n);

        double y = nbis;

        System.err.println("Math.log10(" + y + ")=" + Math.log10(y));

        int tablength = (int) Math.log10(nbis)+1;
        System.err.println("log int de tablenght :" + tablength);
       
        long[] tabu1 = new long[tablength];
           for (int i = 0; i < tabu1.length; i++) {
                tabu1[i] = nbis % 10;
                nbis = nbis / 10;
                
                // System.err.println("nbis :" + nbis);
                // System.err.println("tabu1 : " + i + " = " + tabu1[i]);
            }
        

        System.err.println(" ");
        // affichage avant invertion
       /* for (int i = 0; i < tabu1.length; i++) {
          System.err.println("&tabu1 :" + i + " = " + tabu1[i]);
        }*/
        System.err.println(" ");
        // boucle inversion

        for (int i = 0; i < tabu1.length / 2; i++) {
            long a = 0;
            a = tabu1[i];// a debut : tabu1[0]
            tabu1[i] = tabu1[tabu1.length - 1 - i];//
            tabu1[tabu1.length - 1 - i] = a;

        }
        // affichage apres inversion
       /* for (int i = 0; i < tabu1.length; i++) {
          System.err.println("@tabu1 :" + i + " = " + tabu1[i]);
        }*/
        System.err.println(" ");

        int i = 0;
        for (; i < tabu1.length - 1; i++) {

            if (tabu1[i] > tabu1[i + 1]) {
                tabu1[i + 1] = tabu1[i];

                System.err.println("*tabu1 :" + i + " = " + tabu1[i]);
                break;
            }

            System.err.println("^tabu1 :" + i + " = " + tabu1[i]);
        }
        // i position de fin de mise a jour du nonbre grandissant
        System.err.println("i :" + i);
        for (; i < tabu1.length - 1; i++) {
            tabu1[i + 1] = tabu1[i];
        }
        System.err.println(" ");
        System.err.println("n : " + n);
        System.err.print("solution : ");
        for (int j = 0; j < tabu1.length; j++) {
            // System.err.println("solution");
            System.out.print(tabu1[j]);
        }

        // Write an answer using System.out.println()
        // To debug: System.err.println("Debug messages...");

    }
}

/*
 * 1111111111111123456789
 * 111111111123456799
 * 111111111123456888
 * 111111111123456889
 * 111111111123456899
 * 111111111123456999
 * 111111111123457777
 * 111111111123457778
 * 111111111123457779
 * 111111111123457788
 * 111111111123457789
 * 111111111123457799
 */
